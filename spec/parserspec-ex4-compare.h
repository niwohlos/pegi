"translation-unit\n"
"  declaration-seq\n"
"    declaration\n"
"      template-declaration\n"
"        token: Identifier: ( 1: 1) template\n"
"        token: Operator: ( 1: 9) <\n"
"        template-parameter-list\n"
"          template-parameter\n"
"            parameter-declaration\n"
"              decl-specifier-seq\n"
"                decl-specifier\n"
"                  type-specifier\n"
"                    trailing-type-specifier\n"
"                      simple-type-specifier\n"
"                        token: Identifier: ( 1:10) bool\n"
"              declarator\n"
"                ptr-declarator\n"
"                  noptr-declarator\n"
"                    declarator-id\n"
"                      id-expression\n"
"                        unqualified-id\n"
"                          token: Identifier: ( 1:15) B\n"
"          token: Operator: ( 1:16) ,\n"
"          template-parameter\n"
"            type-parameter\n"
"              token: Identifier: ( 1:18) class\n"
"              token: Identifier: ( 1:24) T\n"
"              token: Operator: ( 1:26) =\n"
"              type-id\n"
"                type-specifier-seq\n"
"                  type-specifier\n"
"                    trailing-type-specifier\n"
"                      simple-type-specifier\n"
"                        token: Identifier: ( 1:28) void\n"
"        token: Operator: ( 1:32) >\n"
"        declaration\n"
"          block-declaration\n"
"            simple-declaration\n"
"              decl-specifier-seq\n"
"                decl-specifier\n"
"                  type-specifier\n"
"                    class-specifier\n"
"                      class-head\n"
"                        class-key\n"
"                          token: Identifier: ( 2: 1) struct\n"
"                        class-head-name\n"
"                          class-name\n"
"                            token: Identifier: ( 2: 8) enable_if\n"
"                      token: Operator: ( 2:18) {\n"
"                      token: Operator: ( 2:19) }\n"
"              token: Operator: ( 2:20) ;\n"
"    declaration\n"
"      template-declaration\n"
"        token: Identifier: ( 3: 1) template\n"
"        token: Operator: ( 3: 9) <\n"
"        template-parameter-list\n"
"          template-parameter\n"
"            type-parameter\n"
"              token: Identifier: ( 3:10) class\n"
"              token: Identifier: ( 3:16) T\n"
"        token: Operator: ( 3:17) >\n"
"        declaration\n"
"          block-declaration\n"
"            simple-declaration\n"
"              decl-specifier-seq\n"
"                decl-specifier\n"
"                  type-specifier\n"
"                    class-specifier\n"
"                      class-head\n"
"                        class-key\n"
"                          token: Identifier: ( 4: 1) struct\n"
"                        class-head-name\n"
"                          class-name\n"
"                            simple-template-id\n"
"                              template-name\n"
"                                token: Identifier: ( 4: 8) enable_if\n"
"                              token: Operator: ( 4:17) <\n"
"                              template-argument-list\n"
"                                template-argument\n"
"                                  constant-expression\n"
"                                    conditional-expression\n"
"                                      logical-or-expression\n"
"                                        logical-and-expression\n"
"                                          inclusive-or-expression\n"
"                                            exclusive-or-expression\n"
"                                              and-expression\n"
"                                                equality-expression\n"
"                                                  relational-expression\n"
"                                                    shift-expression\n"
"                                                      additive-expression\n"
"                                                        multiplicative-expression\n"
"                                                          pm-expression\n"
"                                                            cast-expression\n"
"                                                              unary-expression\n"
"                                                                postfix-expression\n"
"                                                                  primary-expression\n"
"                                                                    literal\n"
"                                                                      token: Bool literal: ( 4:18) true\n"
"                                token: Operator: ( 4:22) ,\n"
"                                template-argument\n"
"                                  type-id\n"
"                                    type-specifier-seq\n"
"                                      type-specifier\n"
"                                        trailing-type-specifier\n"
"                                          simple-type-specifier\n"
"                                            type-name\n"
"                                              class-name\n"
"                                                token: Identifier: ( 4:24) T\n"
"                              token: Operator: ( 4:25) >\n"
"                      token: Operator: ( 4:27) {\n"
"                      member-specification\n"
"                        member-declaration\n"
"                          decl-specifier-seq\n"
"                            decl-specifier\n"
"                              token: Identifier: ( 4:29) typedef\n"
"                            decl-specifier\n"
"                              type-specifier\n"
"                                trailing-type-specifier\n"
"                                  simple-type-specifier\n"
"                                    type-name\n"
"                                      class-name\n"
"                                        token: Identifier: ( 4:37) T\n"
"                          member-declarator-list\n"
"                            member-declarator\n"
"                              declarator\n"
"                                ptr-declarator\n"
"                                  noptr-declarator\n"
"                                    declarator-id\n"
"                                      id-expression\n"
"                                        unqualified-id\n"
"                                          token: Identifier: ( 4:39) type\n"
"                          token: Operator: ( 4:43) ;\n"
"                      token: Operator: ( 4:45) }\n"
"              token: Operator: ( 4:46) ;\n"
